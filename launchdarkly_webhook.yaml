AWSTemplateFormatVersion: 2010-09-09
Parameters:
  apiName:
    Description: API name
    Type: String
  queueName:
    Description: The name of the SQS queue to integrate with the API
    Type: String
  functionName:
    Description: Lambda function paramName
    Type: String
  corsMethodTemplateS3Url:
    Description: location of cors OPTIONS method nested template
    Type: String

Resources:
  WebhookApiPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: WebhookApiPolicy
      Description: Managed policy for Webhook API methods
      Path: /webhook/
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - sqs:SendMessage
            Resource: "*"
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogsStream
              - logs:PutLogEvents
            Resource: "*"

  LdWebhookPostMethodRole:
    Type: AWS::IAM::Role
    Properties:
      Description: Role for ldwebhook POST method
      RoleName: LdWebhookPostMethodRole
      Path: /webhook/
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - apigateway.amazonaws.com
      ManagedPolicyArns:
        - !Ref WebhookApiPolicy

  MyWebhookApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: !Ref apiName
      EndpointConfiguration:
        Types:
          - REGIONAL
  LdWebhook:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt MyWebhookApi.RootResourceId
      PathPart: ldwebhook
      RestApiId: !Ref MyWebhookApi
  LdWebhookPostMethod:
    Type: 'AWS::ApiGateway::Method'
    DependsOn: ['WebhookApiPolicy', 'WebhookSqs']
    Properties:
      HttpMethod: POST
      ResourceId: !Ref LdWebhook
      RestApiId: !Ref MyWebhookApi
      AuthorizationType: NONE
      Integration:
        Type: AWS
        Credentials: !GetAtt LdWebhookPostMethodRole.Arn
        IntegrationHttpMethod: POST
        Uri: !Join 
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref AWS::Region
            - :sqs:path/
            - !Ref AWS::AccountId
            - /
            - !Ref queueName
        PassthroughBehavior: NEVER
        IntegrationResponses:
          - StatusCode: 200
        RequestTemplates:
          application/json: Action=SendMessage&MessageBody=$input.body
        RequestParameters:
          integration.request.header.Content-Type: '''application/x-www-form-urlencoded'''
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          StatusCode: '200'
  CorsStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Ref corsMethodTemplateS3Url
      Parameters:
        restApiId: !Ref MyWebhookApi
        resourceId: !Ref LdWebhook

  MyWebhookApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: LdWebhookPostMethod
    Properties:
      Description: Webhook API deployment
      RestApiId: !Ref MyWebhookApi
  MyWebhookApiV1Stage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: v1
      Description: Version 1 stage of webhook API
      RestApiId: !Ref MyWebhookApi
      DeploymentId: !Ref MyWebhookApiDeployment
      MethodSettings:
        - ResourcePath: '/*'
          HttpMethod: '*'
          MetricsEnabled: 'true'
          DataTraceEnabled: 'true'
          LoggingLevel: INFO

  WebhookSqs:
    Type: AWS::SQS::Queue
    DeletionPolicy: Retain
    Properties:
      QueueName: !Ref queueName
      ReceiveMessageWaitTimeSeconds: 20

  WebhookLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: WebhookLambdaRole
      Path: /webhook/
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole

  WebhookLambda:
    Type: AWS::Lambda::Function
    DependsOn: WebhookSqs
    Properties:
      Description: Lambda function for SQS
      FunctionName: !Ref functionName
      MemorySize: 128
      Role: !GetAtt WebhookLambdaRole.Arn
      Runtime: nodejs14.x
      Handler: index.handler
      Code:
        ZipFile: |
          exports.handler = async (event) => {
              // TODO implement
              console.log('my-function %j', event);
              
              const response = {
                  statusCode: 200,
                  body: JSON.stringify('Hello from Lambda!'),
              };
              return response;
          };

  WebhookMapping:
    Type: AWS::Lambda::EventSourceMapping
    DependsOn: WebhookLambdaRole
    Properties:
      Enabled: true
      EventSourceArn: !GetAtt WebhookSqs.Arn
      FunctionName: !GetAtt WebhookLambda.Arn


